name: 'Compile LaTeX'
description: 'Searches all tex files and compiles them via Rubber'
inputs:
  compile-command:
    description: The command to invoke to compile. Defaults to 'rubber --inplace -d --synctex -s'
    required: true
    default: rubber --inplace -d --synctex -s
  compile-list:
    description: A file used internally. Modify if it clashes with some file of yours.
    required: true
    default: compile_list
  failure-list:
    description: A file used internally. Modify if it clashes with some file of yours.
    required: true
    default: failure-list
  success-list:
    description: A file used internally. Modify if it clashes with some file of yours.
    required: true
    default: success_list
  current-failure-list:
    description: A file used internally. Modify if it clashes with some file of yours.
    required: true
    default: current-failure-list
outputs:
  random-number: 
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-id }}
runs:
  using: "composite"
  steps: 
    - shell: bash
      run: sudo apt-get install -y rubber
    # Note: grep will likely fail some matches, so there must be a || true around the command
    - shell: bash
      run: |
        (find "${GITHUB_WORKSPACE:-/}" -type f -name '*.tex' -print0 | \
            xargs -0 grep -lPv '\s*%\s*\!\s*TeX\s*root' | \
            tee "${{ inputs.compile-list }}") || true
    - shell: bash
      run: |
        echo The following files have been detected as LaTeX roots. If some are not, you can add a magic comment '%!TeX root = ...' to make this action skip them
        cat "${{ inputs.compile-list }}"
    # Strategy
    # while the contents of current-failure-list and failure-list are different and failure-list is not empty
    # replace failure-list with current-failure-list
    # delete current-failure-list
    # for each file in failure list run the compilation
    # if it is successful, append to success_list
    # if it fails, append to current-failure-list
    # if failure-list is not empty, log successes, failures, and fail
    - shell: bash
      run: touch ${{ inputs.failure-list }}
    - shell: bash
      run: cp "${{ inputs.compile-list }}" "${{ inputs.current-failure-list }}"
    - shell: bash
      run: |
        while \
          [ -f "${{ inputs.current-failure-list }}" ] \
          && [ -s "${{ inputs.current-failure-list }}" ] \
          && ! diff <(sort "${{ inputs.failure-list }}") <(sort "${{ inputs.current-failure-list }}") ;\
        do
          echo 'There is still work to do. Trying to compile:'
          cp "${{ inputs.current-failure-list }}" "${{ inputs.failure-list }}"
          rm "${{ inputs.current-failure-list }}"
          cat "${{ inputs.failure-list }}"
          while IFS= read -r file; do
            echo "Running ${{ inputs.compile-command }} $file"
            ${{ inputs.compile-command }} "$file" \
              && (echo "$file" >> "${{ inputs.success-list}}") \
              || (echo "$file" >> "${{ inputs.current-failure-list}}")
          done <"${{ inputs.failure-list }}"
        done
        echo 'Done. Files corrrectly compiled:'
        cat "${{ inputs.success-list}}"
        if [ -f "${{ inputs.current-failure-list }}" ] && [ ! -s "${{ inputs.current-failure-list }}" ]; then
          echo 'Failures:'
          cat "${{ inputs.current-failure-list}}"
          exit 1
        fi
        exit 0
